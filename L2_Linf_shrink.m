
function x = L2_Linf_shrink(y,t)

% Αυτή η συνάρτηση ελαχιστοποιεί τη σχέση: 0.5*||b*x-y||_2^2 + t*||x||_inf
% Σημειώνεται ότι επαρκεί να θεωρηθεί η ελαχιστοποίηση της εξής σχέσης:
% 0.5*||x-y||_2^2 + t/b*||x||_inf
% Επομένως, υποθέτουμε ότι η τιμή του b έχει απορροφηθεί στην t (= tau).
% Η ελαχιστοποίηση προχωρά με την αρχικοποίηση του x με την τιμή y.
% Ορίζεται το z ως y, ταξινομημένο κατά φθίνουσα σειρά ως προς την απόλυτη τιμή του.
% Στη συνέχεια, λύνουμε πρώτα το εξής:
% min_{b >= abs(z2)} 0.5*(b - abs(z1))^2 + t*b
% αν b* = abs(z2), τότε επαναλαμβάνεται με τις δύο μεγαλύτερες τιμές του z:
% min_{b >= abs(z3)} 0.5*(b - abs(z1))^2 + 0.5*(b - abs(z2))^2 + t*b
% που με την διεύρυνση του τετραγώνου ισοδυναμεί με:
% min_{b >= abs(z3)} 0.5*(b - mean(abs(z1),abs(z2)))^2 + t*b
% Η διαδικασία αυτή επαναλαμβάνεται αν b* = abs(z3), κ.τ.λ.
% Το πρόβλημα μειώνεται στην εύρεση ενός δείκτη αποκοπής, όπου
% όλοι οι συντελεστές συρρικνώνονται μέχρι και τον αντίστοιχο δείκτη.
% Ο δείκτης αποκοπής είναι ο μικρότερος ακέραιος k τέτοιος ώστε:
% 1/k * sum(abs(z(1)),...,abs(z(k))) - t/k <= abs(z(k+1))

x = y;% Αρχικοποίηση x με την τιμή y
[dummy,o] = sort(abs(y),'descend');% Ταξινόμηση των απόλυτων τιμών του y κατά φθίνουσα σειρά
z = y(o);% Αναδιάταξη του y σύμφωνα με την ταξινόμηση
mz = abs(z);% Απόλυτες τιμές του z

% Εύρεση του δείκτη αποκοπής
cs = cumsum(abs(z(1:length(z)-1)))./(1:length(z)-1)'-t./(1:length(z)-1)';
d = (cs>abs(z(2:length(z))));
if sum(d) == 0
   cut_index = length(y);% Αν δεν βρεθεί δείκτης, ο δείκτης αποκοπής είναι το τέλος του διανύσματος
else
   cut_index = min(find(d==1));% Εύρεση του μικρότερου δείκτη αποκοπής
end

% Συρρίκνωση των συντελεστών από το 1 έως τον δείκτη αποκοπής
zbar = mean(abs(z(1:cut_index)));
if cut_index < length(y)
   x(o(1:cut_index)) = sign(z(1:cut_index))*max(zbar-t/cut_index,abs(z(cut_index+1)));
else
   x(o(1:cut_index)) = sign(z(1:cut_index))*max(zbar-t/cut_index,0);
end
